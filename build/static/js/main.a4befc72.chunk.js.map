{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","alt","name","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","randomPosition","Math","floor","random","length","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4befc72.chunk.js","sourcesContent":["import axios from \"axios\"\n\n// base url to make requests to the movie database\n// instance using the axios.create method\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n})\n\n\nexport default instance","import React, { useState, useEffect } from \"react\";\nimport YouTube from \"react-youtube\";\nimport axios from \"./axios\"; //import axios helper file\nimport \"./Row.css\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nexport default function Row({ title, fetchUrl }) {\n  // state to store movie data\n  // Declare a new state variable, which we'll call \"movies\"\n\n  const [movies, setMovies] = useState([]); // * useState  Hook to store\n  const [trailerUrl, setTrailerUrl] = useState(\"\"); // * useState Hook to store trailerUrl\n\n  // A snippet of code which runs based on a specific condition/variable\n  // *useEffect HOOK (similar to componentDidMount and componenetDidUpdate)\n  useEffect(() => {\n    // Similar to component did mount ( runs once )\n    // Update the document using API with async function\n    async function fetchData() {\n      //wait for a response,\n      const request = await axios.get(fetchUrl);\n\n      setMovies(request.data.results); //\n\n      return request;\n    }\n    fetchData();\n    // dependency for useEffect that is outside of function\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      //\n      autoplay: 1,\n    },\n  };\n\n  // click event for when img tag is clicked\n  const handleClick = (movie) => {\n    // if video is open\n    if (trailerUrl) {\n      // set trailerUrl to empty if a trailerUrl already exists\n      setTrailerUrl(\"\");\n    } else {\n      // handle showing of setTrailer\n      movieTrailer(movie?.title || \"404\")\n        // .then chain promise\n        .then((url) => {\n          // wrap in URL Search Param to get the querystring\n          // https://www.youtube.com/watch?v=4XP6T1CMgBQ ** everything after ? **\n          const urlParams = new URLSearchParams(new URL(url).search);\n          // If the URL of your page is https://example.com/?name=Jonathan&age=18 you could parse out the 'name' and 'age' parameters\n          setTrailerUrl(urlParams.get(\"v\")); // get value of querystring param variable v=value\n        })\n        // catch error\n        .catch((error) => console.log(error));\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row__posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className=\"row__poster\"\n            src={`${base_url}${movie.poster_path}`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {/* conditional render to show youtube video if it exists */}\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n","const API_KEY = \"16b1c066794370982e2af07bae415696\"\n\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `discover/movie?api_key=${API_KEY}&with_genres=99`,\n}\n\nexport default requests;","import React, { useState, useEffect } from \"react\";\n\nimport axios from \"./axios\"; //import axios helper file\nimport requests from \"./requests\";\nimport \"./Banner.css\";\n\nfunction Banner() {\n  // useState hook to use state in functional component\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      const randomPosition = Math.floor(\n        Math.random() * request.data.results.length\n      );\n      setMovie(request.data.results[randomPosition]); // random movie set as state\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  console.log(movie);\n  // A function to truncate long movie description text\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\n          \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n        )`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      {/** Background image to cover header */}\n\n      {/** title */}\n      {/**Description paragraph */}\n      <div className=\"banner__contents\">\n        <h1 className=\"banner__title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        {/** div > 2 buttons for Play and My List */}\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n          <button className=\"banner__button\">My List</button>\n        </div>\n\n        <h1 className=\"banner__description\">\n          {truncate(movie?.overview, 270)}\n        </h1>\n      </div>\n      <div className=\"banner__fadeBottom\"></div>\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Nav.css\";\n\nfunction Nav() {\n  const [show, handleShow] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      } else handleShow(false);\n    });\n    return () => {\n      window.removeEventListener(\"scroll\");\n    };\n  }, []);\n\n  return (\n    <nav className={`nav ${show && \"nav__black\"}`}>\n      {/* Logo */}\n      <img\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png\"\n        alt=\"Netflix Logo\"\n        className=\"nav__logo\"\n      />\n\n      <img\n        src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\n        alt=\"Netflix Avatar\"\n        className=\"nav__avatar\"\n      />\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Row from \"./Row\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\nimport requests from \"./requests\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* Nav */}\n      <Nav />\n\n      {/* Banner */}\n      <Banner />\n      {/* Row */}\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row\n        title=\"Netflix Originals\"\n        fetchUrl={requests.fetchNetflixOriginals}\n      />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}